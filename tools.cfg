[buildout]
parts += 
    createzopecoverage
    dependencychecker
    flake8
    coverage-sh
    rebuild_i18n-sh
    makefile

[createzopecoverage]
recipe = createzopecoverage

[dependencychecker]
recipe = zc.recipe.egg
eggs = z3c.dependencychecker

[flake8]
recipe = zc.recipe.egg
eggs = flake8

[coverage-sh]
recipe = collective.recipe.template
output = ${buildout:directory}/bin/coverage.sh
mode = 755
input = inline:
    #! /bin/sh
    # checks for report created with createzopecoverage and evaluate the result

    # default minimum coverage is 80%
    DEFAULT=80
    REPORT="coverage/reports/all.html"

    if [ $1 -ge 0 ] && [ $1 -le 100 ]; then
        MINIMUM=$1
    else
        echo "Invalid value for minimum coverage; using default: $DEFAULT%"
        MINIMUM=$DEFAULT
    fi

    if [ ! -f "$REPORT" ]; then
        bin/createzopecoverage 1>/dev/null
    fi

    # find first percentage value in file (module test coverage) and return it
    COVERAGE=`grep "[0-9]\{1,3\}[%]" $REPORT -m 1 -o | grep "[0-9]\{1,3\}" -o`

    if [ $COVERAGE -lt $MINIMUM ]; then
        echo "Insufficient test coverage: $COVERAGE% (minimum acceptable is $MINIMUM%)"
        exit 1
    else
        echo "Current test coverage: $COVERAGE%"
        exit 0
    fi

[variables]
recipe = buildout.variables
source = str "${buildout:package-name}" \. /

[rebuild_i18n-sh]
recipe = collective.recipe.template
output = ${buildout:directory}/bin/rebuild_i18n.sh
mode = 755
input = inline:
    #! /bin/sh
    # see http://maurits.vanrees.org/weblog/archive/2010/10/i18n-plone-4 for more information

    I18NDOMAIN="${buildout:package-name}"
    # find the source, as it shoul be in the src directory
    SOURCE=`find . -type d | grep -m 1 "${variables:source}"`
    LOCALES=`find . -name "locales" -type d | grep "${variables:source}"`

    if [ ! $LOCALES ]; then
        echo "Can't find locales path"
        exit 1
    fi

    # check if the locales directory is registered
    FOUND=`grep -c "i18n:registerTranslations" $SOURCE/configure.zcml`
    if [ $FOUND -eq 0 ]; then
        echo "Translations directory 'locales' not registered in your $SOURCE/configure.zcml file"
        exit 1
    fi

    # rebuild pot file for package's domain and merge it with any manual translations needed
    i18ndude rebuild-pot --pot $LOCALES/$I18NDOMAIN.pot --merge $LOCALES/manual.pot --create $I18NDOMAIN $SOURCE

    # synchronise translations for package's domain
    for po in $LOCALES/*/LC_MESSAGES/$I18NDOMAIN.po; do
        i18ndude sync --pot $LOCALES/$I18NDOMAIN.pot $po
    done

    # rebuild pot file for Plone's domain
    i18ndude rebuild-pot --pot $LOCALES/plone.pot --create plone $SOURCE/configure.zcml $SOURCE/profiles/default

    # synchronise translations for Plone's domain
    for po in $LOCALES/*/LC_MESSAGES/plone.po; do
        i18ndude sync --pot $LOCALES/plone.pot $po
    done

    # report any errors and suspect untranslated messages found
    i18ndude find-untranslated -n $SOURCE

[makefile]
recipe = collective.recipe.template
output = ${buildout:directory}/Makefile
input = inline:
    # convenience Makefile to run validation tests
    # src: source path
    # minimum_coverage: minimun test coverage allowed
    # pep8_ignores: ignore listed PEP 8 errors and warnings
    # max_complexity: maximum McCabe complexity allowed
    # css_ignores: skip file names matching find pattern (use ! -name PATTERN)
    # js_ignores: skip file names matching find pattern (use ! -name PATTERN)

    SHELL = /bin/sh

    src = `find . -type d | grep -m 1 "${variables:source}"`
    minimum_coverage = 80
    pep8_ignores = E501
    max_complexity = 12
    css_ignores = ! -name jquery\*
    js_ignores = ! -name jquery\*

    python-validation:
            bin/flake8 --ignore=$(pep8_ignores) --max-complexity=$(max_complexity) $(src)

    css-validation: ack-install
            npm install csslint -g 2>/dev/null
            find $(src) -type f -name *.css $(css_ignores) | xargs csslint

    .js-validation:
            npm install jshint -g 2>/dev/null
            find $(src) -type f -name *.js $(js_ignores) -exec jshint {} ';'

    validation: python-validation css-validation js-validation
            bin/coverage.sh $(minimum_coverage)
